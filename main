import datetime
import gspread
import smtplib
import config
import ssl
import time
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
global today
today = int(datetime.datetime.now().strftime('%j'))

def SheetConnect():

    from oauth2client.service_account import ServiceAccountCredentials
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name('bot_cred.json', scope)
    client = gspread.authorize(creds)
    
    global sheet
    global backup_sheet
    sheet = client.open("Copy of Candidate Tracker").sheet1
    #backup_sheet = client.open("Candidate Tracker Database").sheet1
    
class Employee():

    def __init__(self, name, email):
        self.name = name
        self.email = email
        
    def __str__(self):
        return(self.name)
    
    def __eq__(self):
        return self.name == other.name or self.email == other.email
        
class Email():
    
    def __init__(self, email, message):
        self.email = email
        self.messages = message
            
    def Ackowledge(self):
        #check for response
        None
    
class Main():
    
    employee_dict = {
    'AA': 'April',
    'GO': 'Gaby'
    }
    
    def __init__(self):
        self.candidates = []
        self.employees = []
        self.__gen_employees()
    
    def __gen_employees(self):
        self.employees.append(Employee('April', 'april.anolin@kellyservices.com'))
        self.employees.append(Employee('Gaby', 'gabriela.ong@kellyservices.com'))
    
    def SendError(self):
        
        password = 'Dylandylan2'
        sent_from = 'kellyservices.bot@gmail.com'
        to = ['dylan.doyle11@gmail.com']  
        subject = ('ERROR') 
        body = ('ERROR')

        msg = MIMEMultipart()
        msg['To'] =', '.join(to)
        msg['From'] = sent_from
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))

        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(sent_from, password)
            server.sendmail(sent_from, to, msg.as_string())
    
    def SendEmail(self, employee, name, l_name, end_date):
        
        password = 'Dylandylan2'
        sent_from = 'kellyservices.bot@gmail.com'
        to = ['dylan.doyle11@gmail.com']  
        subject = ('{}, {} finishing assignment in {} days'.format(l_name, name, end_date)) 
        body = ('Hi {}! Your candidate {}, {} will reach the end of their assignment in {} days'.format(employee, l_name, name, end_date))

        msg = MIMEMultipart()
        msg['To'] =', '.join(to)
        msg['From'] = sent_from
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))

        context = ssl.create_default_context()
        with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:
            server.login(sent_from, password)
            server.sendmail(sent_from, to, msg.as_string())
    
    def Run(self):
        #gotta do for num of sheets in doc
        for i in range(len(sheet.col_values(1))):
            if i == 0:
                continue
            if  i % 5 == 0:
                print(i)
            extract_row = sheet.row_values(i+1)
            end_date = extract_row[0]
            end_date = end_date.split('/')
            end_date = [int(i) for i in end_date]
            end_date.insert(0,end_date[-1])
            end_date.pop(-1)       
            end_day = int(datetime.datetime(end_date[0], end_date[1], end_date[2]).strftime('%j'))
            #simulate end day
            if i == 11:
                end_day = today + 2
            if end_day - today == 7 or end_day - today == 2:
                print('Assignment end detected')
                end = end_day - today
                name = self.employee_dict[extract_row[1]]
                print(name)
                for employee in self.employees:
                    if name == employee.name:
                        try:
                            self.SendEmail(name, extract_row[3], extract_row[2], end)
                            print('Email sent')
                        except:
                            print('Email not sent')
            
bot1 = Main()
    
try:
    SheetConnect()       
    print(sheet.row_values(4))
    print(len(sheet.col_values(1)))
    bot1.Run()
except:
    bot1.SendError()
    print('ERROR')


    
    
    
    

            




